
// 'use client';

// import { useParams } from 'next/navigation';
// import { useEffect, useState } from 'react';
// import { getAssistantById, createThread, createChat } from '@/lib/api';
// import { Card, CardContent, CardFooter, CardHeader } from '@/components/ui/card';
// import { CircleDotDashedIcon, Dot, EditIcon, Loader, SendHorizontalIcon, UserCircle2Icon } from 'lucide-react';
// import { Input } from '@/components/ui/input';
// import { Badge } from '@/components/ui/badge';
// import AssistantForm from '../_components/UpdateCard';

// interface Assistant {
//   astId: string;
//   astName: string;
//   astInstruction: string;
//   gptModel: string;
//   astFiles: {
//     fileId: string;
//     fileName: string;
//     fileSize: number;
//     fileType: string;
//   }[];
//   astTools: string[];
//   createdAt: string;
//   updatedAt: string;
// }

// interface CreateThreadResponse {
//   status: boolean;
//   message: string;
//   data: {
//     thread: {
//       id: string;
//       created_at: number;
//       metadata: any;
//       object: string;
//       tool_resources: any;
//     };
//   };
// }

// export default function AssistantDetailPage() {
//   const { astId } = useParams();
//   const [assistant, setAssistant] = useState<Assistant | null>(null);
//   const [threadTitle, setThreadTitle] = useState('');
//   const [threadId, setThreadId] = useState('');
//   const [message, setMessage] = useState('');
//   const [disable, setDisable] = useState(false);
//   const [chatMessages, setChatMessages] = useState<{ text: string; sender: 'user' | 'assistant' }[]>([]); // State for chat messages

//   useEffect(() => {
//     const fetchAssistant = async () => {
//       if (astId) {
//         try {
//           const response = await getAssistantById(astId as string);
//           console.log(response);
//           if (response.status) {
//             setAssistant(response.data[0]);
//           }
//         } catch (error) {
//           console.error("Error fetching assistant:", error);
//         }
//       }
//     };

//     fetchAssistant();
//   }, [astId]);

//   const handleCreateThread = async () => {
//     setThreadTitle('');

//     if (!assistant || !threadTitle) return;

//     try {
//       if (!threadId) {
//         setDisable(true)
//         const result: CreateThreadResponse = await createThread(assistant.astId, threadTitle);
//         console.log(result);
//         if (result.status) {
//           setMessage(`Thread created successfully: ${result.data.thread.id}`);
//           setThreadId(result.data.thread.id);
//           // call first chatResponse here 
//         } else {
//           setMessage(`Failed to create thread: ${result.message}`);
//         }
//         setDisable(false)
//       } else {
//         setDisable(true)

//         setChatMessages(prevMessages => [
//           ...prevMessages,
//           { text: threadTitle, sender: 'user' },
//         ]);

//         const images: File[] = [];
//         const chatResponse = await createChat(assistant.astId, threadId, threadTitle, images);
//         console.log(chatResponse);

//         setChatMessages(prevMessages => [
//           ...prevMessages,
//           { text: chatResponse as string, sender: 'assistant' }
//         ]);

//         setMessage(`Message sent successfully: ${chatResponse.message}`);
//         setThreadTitle('');
//         setDisable(false)
//       }
//     } catch (error) {
//       setMessage(`Error: ${error}`);
//       console.error("Error creating thread or chat:", error);
//     }

//     setDisable(false)
//   };

//   if (!assistant) {
//     return <p>Assistant not found.</p>;
//   }

//   return (
//     <div className="flex justify-between h-full w-full">
//       {/* Assistant Info Section */}
//       <Card
//         key={assistant.astId}
//         className="hover:shadow-md transition-shadow duration-150 basis-3/5"
//       >
//         <CardHeader>
//           <div className='flex justify-between'>
//             <div className="flex items-center gap-2">
//               <UserCircle2Icon size={32} strokeWidth={1.4} className="text-primary" />
//               <div>
//                 <h2 className="text-base font-semibold text-gray-800 leading-none">{assistant.astName}</h2>
//                 <p className="text-xs text-gray-600 leading-none hover:text-muted">{assistant.astId}</p>
//               </div>
//             </div>
//             <div className=' flex items-center justify-center gap-2'>
//               <Badge>{assistant.gptModel}</Badge>
//             </div>
//           </div>
//         </CardHeader>
//         <hr></hr>
//         <AssistantForm onRequestSuccess={function (data: any): void {
//           throw new Error('Function not implemented.');
//         }} />
//       </Card>

//       {/* Chat Section */}
//       <div className="basis-2/5 px-6 rounded-lg">
//         <Card className='w-full h-full rounded-lg flex flex-col'>
//           <CardHeader className="p-4 bg-gray-100">
//             <div className="flex flex-row items-center gap-2">
//               <UserCircle2Icon size={26} strokeWidth={1.4} className="text-green-600" />
//               <p className="text-base mt-0 font-medium">{assistant.astName}</p>
//             </div>
//           </CardHeader>
//           <CardContent className='flex-grow overflow-y-scroll p-4 bg-white h-full'>
//             <div className="flex flex-col h-full space-y-2">
//               {chatMessages.map((msg, index) => (
//                 <div key={index} className={`p-2 rounded-lg ${msg.sender === 'user' ? 'bg-blue-100 self-end' : 'bg-gray-200 self-start'}`}>
//                   {msg.text}
//                 </div>
//               ))}

//               {disable && (
//                 <div className='flex gap-1 self-start p-2 rounded-lg'>
//                   <div className="w-2 h-2 bg-green-500 rounded-full animate-bounce"></div>
//                   <div className="w-2 h-2 bg-green-500 rounded-full animate-bounce delay-200"></div>
//                   <div className="w-2 h-2 bg-green-500 rounded-full animate-bounce delay-400"></div>
//                 </div>
//               )}
//             </div>
//           </CardContent>
//           <CardContent className='flex items-center justify-center'>
//             <div className="relative w-full">
//               <Input
//                 placeholder="Type your message here..."
//                 className="border rounded-lg w-full"
//                 value={threadTitle}
//                 onChange={(e) => setThreadTitle(e.target.value)}
//               />
//               <button
//                 onClick={handleCreateThread}
//                 disabled={disable}
//                 className="absolute right-[2px] top-1/2 transform -translate-y-1/2 flex items-center justify-center p-2 bg-blue-500 text-white rounded hover:bg-blue-600"
//                 title="Send"
//               >
//                 {!disable ? <SendHorizontalIcon className='h-5 w-5' /> : <Loader className='h-5 w-5 animate-spin'></Loader>}
//               </button>
//             </div>
//           </CardContent>
//           <CardFooter className='w-full flex items-center justify-center text-sm p-2 bg-gray-50 gap-2'>
//             <CircleDotDashedIcon size={18} />
//             <p>Powered by Sentinal</p>
//           </CardFooter>
//         </Card>
//       </div>
//     </div>
//   );
// }